# TerraNav Marketplace GraphQL Schema
# Complete schema for enterprise-grade marketplace platform

type User 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: owner, operations: [read, update, delete] }
  ]) {
  id: ID!
  email: String! @index(name: "byEmail")
  firstName: String
  lastName: String
  profileImageUrl: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  listings: [Listing] @hasMany(indexName: "byUser", fields: ["id"])
  sentMessages: [Message] @hasMany(indexName: "bySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "byReceiver", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  forumPosts: [ForumPost] @hasMany(indexName: "byUser", fields: ["id"])
  reviews: [Review] @hasMany(indexName: "byReviewer", fields: ["id"])
  receivedReviews: [Review] @hasMany(indexName: "byReviewedUser", fields: ["id"])
  cartItems: [CartItem] @hasMany(indexName: "byUser", fields: ["id"])
  wishlistItems: [WishlistItem] @hasMany(indexName: "byUser", fields: ["id"])
}

type Category 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: groups, groups: ["admin"], operations: [create, update, delete] }
  ]) {
  id: ID!
  name: String!
  slug: String! @index(name: "bySlug")
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  listings: [Listing] @hasMany(indexName: "byCategory", fields: ["id"])
  forumPosts: [ForumPost] @hasMany(indexName: "byCategory", fields: ["id"])
}

type Listing 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: owner, operations: [create, read, update, delete] }
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  title: String!
  description: String!
  price: Float!
  images: [String]
  status: String! @default(value: "active")
  condition: String!
  brand: String
  model: String
  size: String
  color: String
  location: String
  city: String
  state: String
  zipCode: String
  latitude: Float
  longitude: Float
  viewCount: Int @default(value: 0)
  userId: ID! @index(name: "byUser")
  categoryId: ID! @index(name: "byCategory")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  user: User @belongsTo(fields: ["userId"])
  category: Category @belongsTo(fields: ["categoryId"])
  comments: [Comment] @hasMany(indexName: "byListing", fields: ["id"])
  messages: [Message] @hasMany(indexName: "byListing", fields: ["id"])
  reviews: [Review] @hasMany(indexName: "byListing", fields: ["id"])
  cartItems: [CartItem] @hasMany(indexName: "byListing", fields: ["id"])
  wishlistItems: [WishlistItem] @hasMany(indexName: "byListing", fields: ["id"])
}

type Message 
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  content: String!
  isRead: Boolean @default(value: false)
  senderId: ID! @index(name: "bySender")
  receiverId: ID! @index(name: "byReceiver")
  listingId: ID @index(name: "byListing")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  sender: User @belongsTo(fields: ["senderId"])
  receiver: User @belongsTo(fields: ["receiverId"])
  listing: Listing @belongsTo(fields: ["listingId"])
}

type Comment 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: owner, operations: [create, read, update, delete] }
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  content: String!
  userId: ID! @index(name: "byUser")
  listingId: ID @index(name: "byListing")
  forumPostId: ID @index(name: "byForumPost")
  parentId: ID @index(name: "byParent")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  user: User @belongsTo(fields: ["userId"])
  listing: Listing @belongsTo(fields: ["listingId"])
  forumPost: ForumPost @belongsTo(fields: ["forumPostId"])
  parent: Comment @belongsTo(fields: ["parentId"])
  replies: [Comment] @hasMany(indexName: "byParent", fields: ["id"])
}

type ForumPost 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: owner, operations: [create, read, update, delete] }
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  title: String!
  content: String!
  viewCount: Int @default(value: 0)
  userId: ID! @index(name: "byUser")
  categoryId: ID! @index(name: "byCategory")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  user: User @belongsTo(fields: ["userId"])
  category: Category @belongsTo(fields: ["categoryId"])
  comments: [Comment] @hasMany(indexName: "byForumPost", fields: ["id"])
}

type Review 
  @model 
  @auth(rules: [
    { allow: public, operations: [read] }
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  rating: Int!
  comment: String
  reviewerId: ID! @index(name: "byReviewer")
  reviewedUserId: ID! @index(name: "byReviewedUser")
  listingId: ID @index(name: "byListing")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  reviewer: User @belongsTo(fields: ["reviewerId"])
  reviewedUser: User @belongsTo(fields: ["reviewedUserId"])
  listing: Listing @belongsTo(fields: ["listingId"])
}

type CartItem 
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  quantity: Int! @default(value: 1)
  userId: ID! @index(name: "byUser")
  listingId: ID! @index(name: "byListing")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  user: User @belongsTo(fields: ["userId"])
  listing: Listing @belongsTo(fields: ["listingId"])
}

type WishlistItem 
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, read, update, delete] }
  ]) {
  id: ID!
  userId: ID! @index(name: "byUser")
  listingId: ID! @index(name: "byListing")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  user: User @belongsTo(fields: ["userId"])
  listing: Listing @belongsTo(fields: ["listingId"])
}

type Report 
  @model 
  @auth(rules: [
    { allow: owner, operations: [create, read] }
    { allow: groups, groups: ["admin"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  reason: String!
  description: String
  status: String! @default(value: "pending")
  reporterId: ID! @index(name: "byReporter")
  listingId: ID @index(name: "byListing")
  userId: ID @index(name: "byUser")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # Relationships
  reporter: User @belongsTo(fields: ["reporterId"])
  listing: Listing @belongsTo(fields: ["listingId"])
  user: User @belongsTo(fields: ["userId"])
}

# Subscriptions for real-time features
type Subscription {
  onCreateMessage(receiverId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
  
  onCreateComment(listingId: ID, forumPostId: ID): Comment
    @aws_subscribe(mutations: ["createComment"])
  
  onUpdateListing(id: ID!): Listing
    @aws_subscribe(mutations: ["updateListing"])
}